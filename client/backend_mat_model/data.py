import pandas as pd
import numpy as np

#const
n = 1.2
m1 = 0.8
m3 = 1


#ОСТ 153-39.4-010-2002 8 страница (4.1) (4.2)
def pipe_wall_thickness_for_decommissioning(R_H_1:float, R_H_2:float, P:float, alfa:float, D_h:float, k1:float,
                                            m2:float, m3:float) -> float:
    """
    pipe_wall_thickness: толщина стенки трубы или детали трубопровода при которой они должны быть изъяты из
    эксплуатации, м
    R1: расчётное сопротивление материала труб и деталей трубопровода, Па
    :param R_H_1: нормативное сопротивление, равное наименьшему значению прете ла текучести при растяжении, сжатии и
    изгибе материала труб, принимаемое по ГОСТу или ТУ на соответствующие трубы. Па
    :param R_H_2: нормативное сопротивление, равное наименьшему значению предела текучести при растяжении, сжатии и
    изгибе материала труб, принимаемое по ГОСТу или ТУ на соответствующие трубы. Па
    :param m2: коэффициент условий работы трубопровода, величина которого принимается в зависимости от транспортируемой
    фель для токсичных, горю чих, взрывоопасных и сжиженных газов 0,6; для инертных газов (ают, воздух и т.п.) или
    токсичных, горючих, взрывоопасных жидкостей 0,75; для инерт ных жидкостей 0.9:
    :param m3: кэффициент условий работы материала труб при повышенных тем пературах, для условий работы промысловых
    трубопроводов
    n: const
    :param P: рабочее давление в трубопроводе, Па
    :param alfa: коэффициент несущей способности, см. спецификацию
    :param D_h: наружный диаметр трубы или детали трубопровода, м
    m1: const
    :param k1: коэффициент однородности материала труб: для бесшовных труб из углеродистой и для сварных труб из
    низколегированной ненормализованной стали к 0,8, для сварных труб из углеродистой и для сварных труб из
    нормализованной низколегированной стали к, 0,85
    :return:
    """
    if (R_H_2 * m3) / (R_H_1 * m2) >= .75:
        R1 = R_H_1 * m1 * m2 * k1
        pipe_wall_thickness = (n * P * alfa * D_h) / (2 * (R1 + n * P))
    else:
        pipe_wall_thickness = (n * P * alfa * D_h) / (2 * (0.9 * R_H_2 * m3 + n * P))
    return pipe_wall_thickness